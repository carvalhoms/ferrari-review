generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model migrations {
  id        Int    @id @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar(255)
}

model persons {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(250)
  birthAt   DateTime?   @db.Date
  phone     String?     @db.VarChar(16)
  document  String?     @db.VarChar(14)
  createdAt DateTime    @default(now()) @db.DateTime(0)
  updatedAt DateTime    @default(now()) @db.DateTime(0)
  addresses addresses[]
  contacts  contacts[]
  users     users[]
}

model users {
  id                Int                 @id @default(autoincrement())
  email             String              @unique(map: "UQ_97672ac88f789774dd47f7c8be3") @db.VarChar(250)
  password          String              @db.VarChar(250)
  photo             String?             @db.VarChar(250)
  personId          Int
  createdAt         DateTime            @default(now()) @db.DateTime(0)
  updatedAt         DateTime            @default(now()) @db.DateTime(0)
  persons           persons             @relation(fields: [personId], references: [id], onDelete: Cascade, map: "FK_users_persons")
  password_recovery password_recovery[]

  @@index([personId], map: "FK_users_persons")
}

model password_recovery {
  id        Int       @id @default(autoincrement())
  token     String    @db.VarChar(255)
  userId    Int
  resetAt   DateTime? @db.DateTime(0)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  users     users     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_password_recovery_users")

  @@index([userId], map: "fk_password_recovery_users")
}

model contacts {
  id        Int      @id @default(autoincrement())
  personId  Int
  email     String   @db.VarChar(250)
  message   String   @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0)
  persons   persons  @relation(fields: [personId], references: [id], onDelete: Cascade, map: "fk_contacts_persons")

  @@index([personId], map: "fk_contacts_persons")
}

model time_options {
  id         Int      @id @default(autoincrement())
  day        Int      @db.TinyInt
  time       DateTime @db.Time(0)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
}

model services {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(45)
  description String   @db.MediumText
  price       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @db.Timestamp(0)
}

model addresses {
  id         Int      @id @default(autoincrement())
  street     String   @db.VarChar(255)
  number     String?  @db.VarChar(16)
  complement String?  @db.VarChar(255)
  district   String   @db.VarChar(255)
  city       String   @db.VarChar(255)
  state      String   @db.VarChar(255)
  country    String   @db.VarChar(255)
  zipcode    String   @db.VarChar(8)
  personId   Int
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @db.Timestamp(0)
  persons    persons  @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_addresses_persons")

  @@index([personId], map: "fk_addresses_persons")
}
